Assignment name  : mini_serv
Expected files   : mini_serv.c
Allowed functions: write, close, select, socket, accept, listen, send, recv, bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen, exit, strcpy, strcat, memset
--------------------------------------------------------------------------------

client 를 위하여, 127.0.0.1 의 특정 포트에 연결하고 수신하며, 다른 이들과 대화를 허락하는 프로그램을 작성하라. 

처음 인자로 포트를 취하는 그램이다. 만약 아무런 인자가 없다면, 
stderr 로 "Wrong number of arguments" 라는 메시지를 작성하고, 개행한 뒤 1을 반환하며 종료한다. 
프로그램이 연결하는 것을 시작하기 이전에 시스템 함수가 에러를 반환한다면, stderr로 "Fatal error"를 개행 전에 출력하고 1을 반환하라. 
만약에 메모리 할당이 불가능하다면, "Fatal error" 를 stderr 로 출력하고 1을 반환하라. 

당신의 프로그램은 반드시 비동기로 동작해야 하고, 그러나 클라이언트가 개으르고, 그들이 당신의 메시지를 읽지 않는다고 해도, 그들을 끊어서는 안된다. 

당신의 프로그램은 반드시 #define prepro 을 포함하지 말아야 하며
당신의 프로그램은 반드시 127.0.0.1 만을 수신해야 한다. 
당신이 받게 될 fd는 select가 호출되기 전에 호출되지 않은 경우 차단하기 위해 'recv' 또는 'send'를 만들도록 이미 설정되어 있지만 그렇지 않으면 차단되지 않습니다.

클라이언트가 서버에 연결 될 때:
- 클라이언트는 id를 제공받게 된다. 최초 클라이언트는 id 0을 받고, 각 새로운 클라이언트는 이전 클라이언트 id + 1을 받게 된다. 
- %d 는 이 숫자에 의해 대체 된다.  
- 메시지는 서버에 연결된 모든 클라이언트 들에게 전달된다. : "server: client %d just arrived\n"

클라이언트들은 반드시 당신의 프로그램에 메시지를 보낼 수 있어야 한다. 
- 메시지는 출력 가능한 문자열이며, 점검할 필요는 없다. 
- 단일 메시지는 복수의 \n을 가질 수 있다. 
- 서버가 메시지를 수신 했을 때, 다른 모든 클라이언트에게 재 발신 해줘야 한다. "client %d: "라고 모든 라인 이전에 붙여줘야 한다. 

서버에서 클라이언트가 연결이 끊기게 된다면: 
- 서버에 연결된 모든 클라이언트에게 메시지가 전달된다.: "server: client %d just left\n"

메모리 혹은 fd 누수는 금지된다. 

당신을 돕고자, 서버의 시작과 함께 main.c 파일을 발견할 수 있을 거고, 이는 일정부분 매우 유용한 함수들일 것이다. (이 파일은 금지된 함수 혹은 당신의 최종 프로그램 상에서 있어선 안되는 것이 적혀져 있음을 명심해라)

가능한 빠르게 메시지를 당신이 전달할 수 있기를 우리 테스터는 예상하고 있음을 먼저 알립니다. 따라서 불필요한 버퍼는 사용하지 마십시오.

평상시 보다 평가가 조금 걸릴 수 있습니다. 

Hint: nc 를 당신의 프로그램 테스트에 사용할 수 있다. 
Hint: nc 로 당신의 프로그램 테스트를 해야합니다. 
Hint: fcntl(fd, F_SETFL, O_NONBLOCK)을 사용하기 위해 select 를 사용해라, 그리고 반드시 EAGAIN 은 확인하지 마라. (man 2 send)