Assignment name  : mini_paint
Expected files   : *.c *.h
Allowed functions: fopen, fread, fscanf, fclose, write, malloc, calloc, realloc, free, memset, powf, sqrtf
--------------------------------------------------------------------------------------

터미널 상에 "연산 파일"을 읽고, 출력하는 프로그램을 작성하시오. 

당신의 프로그램은 반드시 하나의 인자를 받고, 그 인자는 "연산 파일"의 경로를 의미합니다.
만약 0 혹은 1보다 많은 인자가 당신의 프로그램에 제공되었을 때는 "Error: argument" 라고 STDOUT 으로 개행문자와 함께 출력합니다

$> ./mini_paint | cat -e
Error: argument$
$> ./mini_paint do not fear mathematics | cat -e
Error: argument$
$> 

만약 어떤 문제가 당신이 "연산 파일"을 열거나 읽는 도중 발생하면, "Error: Operation file corrupted" 라고 STDOUT으로 개행문자와 함께 출력합니다. 

"연산 파일"은 줄당 하나의 연산을 포함하는 라인들을 갖고 있습니다.
만약 라인이 부정확하면 에러가 발생합니다. 
만약 에러가 발생하면 당신의 프로그램은 반드시 1을 반환합니다.
만약 에러가 발생하지 않았다면 반드시 0을 반환합니다. 
마지막 라인은 개행문자 없이 끝날 수 있습니다. 
라인들은 순서대로 읽혀져야 하며, 그러므로 연산 작업도 반드시 동일 순서대로 수행되어야 합니다. 
라인당 각 변수들 사이에는 띄워쓰기가 존재합니다. 

WIDTH HEIGHT BACKGROUND_CHAR
이 라인은 항상 파일의 가장 첫 라인에 존재합니다. 그리고 이는 그릴 영역을 정의내립니다. 당신의 프로그램은 그릴 영역 밖에는 어떤 것도 출력되어서는 안됩니다. 이것은 반드시 한번만 존재해야 합니다. 
- WIDTH				: 반드시 너비는 0보다 크고 300보다 작나 같으며, 그릴 영역을 위해 사용하는 문자의 수평 개수입니다.
- HEIGHT			: 반드시 높이는 0보다 크고 300보다 작나 같으며, 그릴 영역을 위해 사용하는 문자의 수직 개수입니다.
- BACKGROUND_CHAR	: 그릴 공간의 빈공간은 반드시 이 문자로 그려져야 합니다. 
 
c X Y RADIUS CHAR
이 연산자는 원의 경계만 그려지는 빈 원을 그립니다. 
- c			:
- X			:
- Y			:
- RADIUS	:
- CHAR		:
  
C X Y RADIUS  CHAR
이 연산자는 채워진 원을 그립니다.    
- C			: 구분자 문자 C
- X			: 실수 값으로, 원의 중심의 수평 위치를 나타냅니다.
- Y			: 실수 값으로, 원의 중심의 수직 위치를 나타냅니다. 
- RADIUS	: 양의 실수지만, 0은 아니며, 원의 반지름을 의미합니다. 
- CHAR		: 원을 그리기 위해 사용하는 문자입니다. 


그림 영역은 직사각형으로 구분되며, 각각 하나의 문자를 포함할 수 있습니다. 우리는 이를 픽셀이라고 부를 것입니다. 
모든 것을 더 쉽게 만들기 위해, 우리는 원에 픽셀이 존재 하는지 않하는 지를 알기 위해 픽셀의 좌상단만을 사용합니다. 
만약 픽셀의 좌상단 코너와 원의 중심 사이의 거리가 원의 반지름보다 더 적거나 같다면, 픽셀은 원의 부분입니다. 
하지만 
좌상단 픽셀과 원의 경계에서 거리가 더 크거나, 1보다 크면 해당 픽셀은 빈 원의 일부가 아닙니다. 
원의 경게에서 1보다 작은 거리와 좌상단 코너의 픽셀은 빈원의 일부입니다. 

다음 몇 줄을 읽는 동안 이미지를 봐야 합니다. 터미널에서 표지됩니다. 우리는 그림영역의 너비를 5, 높이를 3으로 할 것입니다. 
다음 예시를 당신이 이해하는 것을 돕고자 우리는 다른 문자를 사용했습니다. 
만약 당신이 연산자 C 1.5 1.5 1 0 @ (핑크 원)를 그리고 싶다면
이 말은 문자 이미지 안에 b, c, B, C 가 @로 대체될 것을 의미합니다. 

당신은 예시 연산파일로 당신의 것을 테스트 하는 것을 돕기 위해  our_mini_paint를 찾아야 합니다. 

Hint:
만약 당신이 2점을 받았고, (Xa, Ya)그리고 (Xb, Yb)라고 정의되어 있다면, 
당신은 두 점 사이의 거리를 재는 다음 방정식을 쓸 수 있습닏. : srqt((Xa - Xb) * (Xa - Xb) + (Ya - Yb) * (Ya - Yb))

-------------------------------------------------------------------------------------------------------------------
